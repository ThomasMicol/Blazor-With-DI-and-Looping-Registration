@using Blazor_With_DI_and_Looping_Registration.Data.Extensions;
@using Blazor_With_DI_and_Looping_Registration.Data.Dashboard.Models;
@using Blazor_With_DI_and_Looping_Registration.Data.Data_Set_Models; 
@inject Blazor_With_DI_and_Looping_Registration.Data.Login.ILoginService LoginService;
@inject IJSRuntime JsRunTime;
@inject Blazor_With_DI_and_Looping_Registration.Data.Dashboard.IDashboardService DashboardService;

<h3>Dashboard</h3>
@if (LoginService.Investor != null)
{
<div class="o-grid o-grid--wrap o-grid--small-full u-letter-box-medium">
    <div class="o-grid__cell o-grid__cell--width-50">
        <div class="u-gradient-text u-gradient-text--success u-xlarge">
            Income
        </div>
        <div class="o-panel-container" style="height: 150px">
            <div class="o-panel">
                <ul>
                    @foreach (var expense in Investor.Income.ToList())
                    {
                        <li>
                            @expense.TransactionAmount.ToCurrency() | @expense.Frequency.ToString()
                        </li>
                    }

                </ul>
            </div>

        </div>
        <div class="card-footer">
            <div class="o-grid">
                <button class="o-grid__cell o-grid__cell--width-10 c-button" @onclick="ShowAddIncomeModal">
                    <span class="oi oi-plus"></span>
                </button>
                <blaze-counter id="incomeCounter"
                               class="o-grid__cell u-large u-gradient-text--mono"
                               auto-start="true"
                               start-value="0"
                               end-value="@Investor.Income.Sum(i => i.ConvertToYearlyStandard().TransactionAmount)"
                               duration="2"
                               decimals="2">
                    <span slot="prefix">$</span>
                    <span slot="suffix"> annually</span>
                </blaze-counter>
            </div>
        </div>
    </div>

    <Blazor_With_DI_and_Looping_Registration.Components.NetworthSummary Investor="@Investor"></Blazor_With_DI_and_Looping_Registration.Components.NetworthSummary>


    <div class="o-grid__cell o-grid__cell--width-50">

        <div class="u-gradient-text u-gradient-text--error u-xlarge">
            Expenses
        </div>
        <div class="o-panel-container" style="height: 150px">
            <div class="o-panel">
                <ul>
                    @foreach (var expense in Investor.Expenses.ToList())
                    {
                        <li>
                            @expense.TransactionAmount.ToCurrency() | @expense.Frequency.ToString()
                        </li>
                    }

                </ul>

            </div>

        </div>
        <div class="card-footer">
            <div class="o-grid">
                <button class="o-grid__cell--width-10 c-button" @onclick="ShowAddExpenseModal">
                    <span class="oi oi-minus"></span>

                </button>
                <blaze-counter id="expenseCounter"
                               class="o-grid__cell u-large u-gradient-text--mono"
                               auto-start="true"
                               start-value="0"
                               end-value="@Investor.Expenses.Sum(i =>  i.ConvertToYearlyStandard().TransactionAmount)"
                               duration="2"
                               decimals="2">
                    <span slot="prefix">$</span>
                    <span slot="suffix"> annually</span>
                </blaze-counter>
            </div>
        </div>


    </div>

</div>

<blaze-modal small dismissible id="addIncomeModal">
    <blaze-card>
        <blaze-card-header>
            <h2 class="c-heading u-xlarge">
                Add Income
            </h2>
        </blaze-card-header>
        <EditForm Model="@incomeForm" OnValidSubmit="@AddIncome">
            <blaze-card-body>

                <label class="c-label">
                    amount:
                    <InputNumber id="Amount" @bind-Value="incomeForm.Amount" class="c-field c-field--label" />
                </label>
                <label class="c-label">
                    frequency:
                    <InputSelect id="Frequency" @bind-Value="incomeForm.Frequency" class="c-field c-field--label">
                        @foreach (var type in Enum.GetValues(typeof(Blazor_With_DI_and_Looping_Registration.Data.Data_Set_Models.TransactionFrequency)).Cast<Blazor_With_DI_and_Looping_Registration.Data.Data_Set_Models.TransactionFrequency>())
                            {
                            <option value="@type">@type</option>
                            }
                    </InputSelect>
                </label>


            </blaze-card-body>
            <blaze-card-footer>
                <div class="c-input-group">
                    <button type="submit" class="c-button c-button--brand c-button--block">
                        Add
                    </button>
                </div>
            </blaze-card-footer>
        </EditForm>
    </blaze-card>
</blaze-modal>

<blaze-modal small dismissible id="addExpenseModal">
    <blaze-card>
        <blaze-card-header>
            <h2 class="c-heading u-xlarge">
                Add Expense
            </h2>
        </blaze-card-header>
        <EditForm Model="@expenseForm" OnValidSubmit="@AddExpense">
            <blaze-card-body>
                <label class="c-label">
                    amount:
                    <InputNumber id="Amount" @bind-Value="expenseForm.Amount" class="c-field c-field--label" />
                </label>
                <label class="c-label">
                    frequency:
                    <InputSelect id="Frequency" @bind-Value="expenseForm.Frequency" class="c-field c-field--label">
                        @foreach (var type in Enum.GetValues(typeof(Blazor_With_DI_and_Looping_Registration.Data.Data_Set_Models.TransactionFrequency)).Cast<Blazor_With_DI_and_Looping_Registration.Data.Data_Set_Models.TransactionFrequency>())
                            {
                            <option value="@type">@type</option>
                            }
                    </InputSelect>
                </label>
        </blaze-card-body>
        <blaze-card-footer>
            <div class="c-input-group">
                <button type="submit" class="c-button c-button--brand c-button--block">
                    Add
                </button>
            </div>
        </blaze-card-footer>
        </EditForm>
    </blaze-card>
</blaze-modal>
}


@code {
    [Parameter]
    public int test { get; set; }

    public PaymentForm incomeForm = new PaymentForm();
    public PaymentForm expenseForm = new PaymentForm();

    public Investor Investor
    {
        get
        {
            return LoginService.Investor;
        }
    }

    public void ShowAddIncomeModal(MouseEventArgs args) {
        JsRunTime.InvokeVoidAsync("openAddIncomeModalElement");
    }

    public void ShowAddExpenseModal(MouseEventArgs args)
    {
        JsRunTime.InvokeVoidAsync("openAddExpenseModalElement");
    }

    public void AddIncome()
    {
        DashboardService.AddIncome(incomeForm);
        JsRunTime.InvokeVoidAsync("closeAddIncomeModalElement");
        JsRunTime.InvokeVoidAsync("updateCounter", new List<object> { "#incomeCounter", @Investor.Income.Sum(i => i.ConvertToYearlyStandard().TransactionAmount) });
    }

    public void AddExpense()
    {
        DashboardService.AddExpense(expenseForm);
        JsRunTime.InvokeVoidAsync("closeAddExpenseModalElement");
        JsRunTime.InvokeVoidAsync("updateCounter", new List<object> { "#expenseCounter", @Investor.Expenses.Sum(i => i.ConvertToYearlyStandard().TransactionAmount) });

    }

}
